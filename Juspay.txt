//MAXIMUM SUM CYCLE

import java.util.Arrays;
import java.util.HashSet;

public class Main {
    static HashSet<Integer> cycle;
    public long largestSum(int[] Edge){
        long largest = -1;
        cycle = new HashSet<>();
        boolean[] visited = new boolean[Edge.length];
        int j = 0;
        for (int i = 0; i < Edge.length; i++) {
            j = i;

            if(Edge[i] == -1){
                continue;
            }
            else{
                largest = Math.max(largest,dfs(i,Edge,visited,j));
            }

        }
        return largest;
    }

    long dfs(int i,int[] Edge,boolean[] visited,int j) {
        if(i == -1){
            return -1;
        }
        if (!cycle.contains(i) && visited[i] != true) {
            visited[i] = true;
            return dfs(Edge[i], Edge, visited, j);
        }
        else if (cycle.contains(i) || (visited[i] && i != j)) {
            return -1;
        }
        else {
            if (i != -1) {
                int help = i;
                int sum = 0;

                do {
                    if(help != -1) {
                        sum += help;
                        cycle.add(help);
                        help = Edge[help];
                    }
                    else {
                        Arrays.fill(visited,false);
                        return -1;
                    }
                } while (help != i);
                Arrays.fill(visited,false);
                System.out.println(sum);
                return sum;
            }
        }
        return -1;
    }
    public static void main(String[] args) {
        String sd = "4 4 1 4 13 8 8 8 0 8 14 9 15 11 -1 10 15 22 22 22 22 22 21";//4 4 1 4 13 8 8 8 0 8 14 9 15 11 -1 10 15 22 22 22 22 22 21
        String[] input = sd.split(" ");
        int[] Edge = new int[input.length];
        for(int i = 0; i < input.length;i++){
            Edge[i] = Integer.parseInt(input[i]);
        }
        Main h = new Main();
        System.out.println(h.largestSum(Edge));//Printing Maximum Sum Cycle
    }


}
